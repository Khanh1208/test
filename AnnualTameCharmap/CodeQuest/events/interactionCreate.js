
const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const playerManager = require('../player');
const logger = require('../utils/logger');

module.exports = {
    name: 'interactionCreate',
    
    async execute(interaction) {
        try {
            if (interaction.isChatInputCommand()) {
                await this.handleSlashCommand(interaction);
            } else if (interaction.isButton()) {
                await this.handleButtonInteraction(interaction);
            } else if (interaction.isStringSelectMenu()) {
                await this.handleSelectMenuInteraction(interaction);
            }
        } catch (error) {
            logger.error('Error handling interaction:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ùå L·ªói h·ªá th·ªëng')
                .setDescription('ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω t∆∞∆°ng t√°c!')
                .setTimestamp();

            if (interaction.replied || interaction.deferred) {
                await interaction.followUp({ embeds: [errorEmbed], ephemeral: true });
            } else {
                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            }
        }
    },

    async handleSlashCommand(interaction) {
        const command = interaction.client.commands.get(interaction.commandName);
        
        if (!command) {
            logger.warn(`No command matching ${interaction.commandName} was found.`);
            return;
        }

        try {
            await command.execute(interaction);
        } catch (error) {
            logger.error(`Error executing command ${interaction.commandName}:`, error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ùå L·ªói l·ªánh')
                .setDescription('ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh!')
                .setTimestamp();

            if (interaction.replied || interaction.deferred) {
                await interaction.followUp({ embeds: [errorEmbed], ephemeral: true });
            } else {
                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
            }
        }
    },

    async handleButtonInteraction(interaction) {
        const userId = interaction.user.id;
        const customId = interaction.customId;
        
        try {
            // Load the appropriate command based on button prefix
            if (customId.startsWith('help_') || customId.includes('guide') || customId.includes('support')) {
                const hotroCommand = require('../commands/hotro');
                return await this.handleHotroButtons(interaction, hotroCommand);
            } else if (customId.startsWith('cultivation_') || customId.includes('tuluyen')) {
                const tuluyenCommand = require('../commands/tuluyen');
                return await this.handleTuluyenButtons(interaction, tuluyenCommand);
            } else if (customId.startsWith('breakthrough_') || customId.includes('dotpha')) {
                const dotphaCommand = require('../commands/dotpha');
                return await this.handleDotphaButtons(interaction, dotphaCommand);
            } else if (customId.startsWith('shop_') || customId.includes('buy_')) {
                const shopCommand = require('../commands/shop');
                return await this.handleShopButtons(interaction, shopCommand);
            } else if (customId.includes('inventory') || customId.includes('equip_') || customId.includes('use_')) {
                const khoCommand = require('../commands/kho');
                return await this.handleKhoButtons(interaction, khoCommand);
            } else if (customId.includes('ranking') || customId.includes('bxh_')) {
                const bxhCommand = require('../commands/bxh');
                return await this.handleBxhButtons(interaction, bxhCommand);
            } else if (customId.startsWith('boss_') || customId.includes('fight_boss')) {
                const bossCommand = require('../commands/boss');
                return await this.handleBossButtons(interaction, bossCommand);
            } else if (customId.startsWith('admin_')) {
                const adminCommand = require('../commands/admin');
                return await this.handleAdminButtons(interaction, adminCommand);
            } else if (customId === 'start_cultivation') {
                await this.handleStartCultivation(interaction);
            } else if (customId === 'stop_cultivation') {
                await this.handleStopCultivation(interaction);
            } else if (customId === 'confirm_registration') {
                await this.handleRegistrationConfirm(interaction);
            } else if (customId === 'learn_more_first') {
                await this.handleLearnMore(interaction);
            } else if (customId === 'cancel_registration') {
                await this.handleCancelRegistration(interaction);
            } else {
                await interaction.reply({ content: '‚ùå T∆∞∆°ng t√°c kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán!', ephemeral: true });
            }
        } catch (error) {
            logger.error('Error in button interaction:', error);
            await interaction.reply({ content: '‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω t∆∞∆°ng t√°c!', ephemeral: true });
        }
    },

    async handleHotroButtons(interaction, command) {
        const customId = interaction.customId;
        
        if (customId === 'beginner_guide') {
            return await command.showBeginnerGuide(interaction);
        } else if (customId === 'advanced_guide') {
            return await command.showAdvancedGuide(interaction);
        } else if (customId === 'contact_support') {
            return await command.showContact(interaction);
        } else if (customId === 'commands_by_category') {
            return await command.showCommandsHelp(interaction);
        } else if (customId === 'command_examples') {
            await interaction.reply({ 
                content: 'üí° **V√≠ d·ª• s·ª≠ d·ª•ng commands:**\n\n`!dk` - ƒêƒÉng k√Ω t√†i kho·∫£n\n`!tuluyen` - B·∫Øt ƒë·∫ßu tu luy·ªán\n`!dotpha` - Th·ª±c hi·ªán ƒë·ªôt ph√°\n`!shop` - M·ªü c·ª≠a h√†ng\n`!pvp @user` - Th√°ch ƒë·∫•u PvP\n`!boss list` - Xem danh s√°ch boss', 
                ephemeral: true 
            });
        } else {
            await interaction.reply({ content: 'üîÑ Ch·ª©c nƒÉng ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn...', ephemeral: true });
        }
    },

    async handleTuluyenButtons(interaction, command) {
        const customId = interaction.customId;
        const player = playerManager.getPlayer(interaction.user.id);
        
        if (customId === 'cultivation_start') {
            return await command.startCultivation(interaction, player, interaction.client);
        } else if (customId === 'cultivation_complete') {
            return await command.completeCultivation(interaction, player, interaction.client);
        } else if (customId === 'cultivation_status') {
            return await command.showCultivationStatus(interaction, player, interaction.client);
        } else if (customId === 'cultivation_info') {
            return await command.showCultivationInfo(interaction, player, interaction.client);
        } else {
            await interaction.reply({ content: 'üîÑ Ch·ª©c nƒÉng tu luy·ªán ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω...', ephemeral: true });
        }
    },

    async handleDotphaButtons(interaction, command) {
        const customId = interaction.customId;
        const player = playerManager.getPlayer(interaction.user.id);
        
        if (customId === 'breakthrough_attempt') {
            return await command.attemptBreakthrough(interaction, player, interaction.client);
        } else if (customId === 'breakthrough_info') {
            return await command.showBreakthroughInfo(interaction, player, interaction.client);
        } else if (customId === 'breakthrough_history') {
            return await command.showBreakthroughHistory(interaction, player, interaction.client);
        } else if (customId === 'breakthrough_confirm') {
            return await command.executeBreakthrough(interaction, player, interaction.client);
        } else if (customId === 'breakthrough_cancel') {
            await interaction.update({ content: '‚ùå ƒê√£ h·ªßy ƒë·ªôt ph√°!', components: [] });
        } else {
            await interaction.reply({ content: 'üîÑ Ch·ª©c nƒÉng ƒë·ªôt ph√° ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω...', ephemeral: true });
        }
    },

    async handleShopButtons(interaction, command) {
        const customId = interaction.customId;
        const player = playerManager.getPlayer(interaction.user.id);
        
        if (customId === 'shop_weapons') {
            return await command.showWeaponsShop(interaction, player);
        } else if (customId === 'shop_armor') {
            return await command.showArmorShop(interaction, player);
        } else if (customId === 'shop_pills') {
            return await command.showPillsShop(interaction, player);
        } else if (customId === 'shop_materials') {
            return await command.showMaterialsShop(interaction, player);
        } else if (customId === 'shop_special') {
            return await command.showSpecialShop(interaction, player);
        } else if (customId === 'back_to_main_shop') {
            return await command.showMainShop(interaction, player);
        } else {
            await interaction.reply({ content: 'üîÑ Ch·ª©c nƒÉng shop ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω...', ephemeral: true });
        }
    },

    async handleKhoButtons(interaction, command) {
        const customId = interaction.customId;
        const player = playerManager.getPlayer(interaction.user.id);
        
        if (customId === 'show_weapons_inventory') {
            return await command.showWeaponsInventory(interaction, player);
        } else if (customId === 'show_armor_inventory') {
            return await command.showArmorInventory(interaction, player);
        } else if (customId === 'show_pills_inventory') {
            return await command.showPillsInventory(interaction, player);
        } else if (customId === 'show_materials_inventory') {
            return await command.showMaterialsInventory(interaction, player);
        } else if (customId === 'auto_sort_inventory') {
            await interaction.reply({ content: 'üìã ƒê√£ s·∫Øp x·∫øp kho ƒë·ªì t·ª± ƒë·ªông!', ephemeral: true });
        } else if (customId === 'inventory_statistics') {
            await interaction.reply({ content: 'üìä Th·ªëng k√™ kho ƒë·ªì ƒëang ƒë∆∞·ª£c t·∫£i...', ephemeral: true });
        } else {
            await interaction.reply({ content: 'üîÑ Ch·ª©c nƒÉng kho ƒë·ªì ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω...', ephemeral: true });
        }
    },

    async handleBxhButtons(interaction, command) {
        const customId = interaction.customId;
        const player = playerManager.getPlayer(interaction.user.id);
        
        if (customId === 'find_my_rank') {
            const ranks = command.getPlayerRanks(player);
            await interaction.reply({
                content: `üìç **V·ªã tr√≠ c·ªßa b·∫°n:**\nüèîÔ∏è C·∫£nh gi·ªõi: #${ranks.realm}\nüí™ S·ª©c m·∫°nh: #${ranks.power}\n‚öîÔ∏è PvP: #${ranks.pvp}`,
                ephemeral: true
            });
        } else if (customId === 'hall_of_fame') {
            await interaction.reply({ content: 'üèõÔ∏è Hall of Fame ƒëang ƒë∆∞·ª£c t·∫£i...', ephemeral: true });
        } else if (customId === 'weekly_rewards') {
            await interaction.reply({ content: 'üéÅ Ph·∫ßn th∆∞·ªüng tu·∫ßn ƒëang ƒë∆∞·ª£c t√≠nh to√°n...', ephemeral: true });
        } else {
            await interaction.reply({ content: 'üîÑ Ch·ª©c nƒÉng b·∫£ng x·∫øp h·∫°ng ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω...', ephemeral: true });
        }
    },

    async handleBossButtons(interaction, command) {
        const customId = interaction.customId;
        const player = playerManager.getPlayer(interaction.user.id);
        
        if (customId === 'show_boss_list') {
            return await command.showBossList(interaction, player);
        } else if (customId === 'recommended_boss') {
            await interaction.reply({ content: 'üéØ ƒêang t√¨m boss ph√π h·ª£p cho b·∫°n...', ephemeral: true });
        } else if (customId === 'boss_preparation') {
            await interaction.reply({ content: 'üõ°Ô∏è Tips chu·∫©n b·ªã chi·∫øn ƒë·∫•u v·ªõi boss...', ephemeral: true });
        } else if (customId === 'boss_leaderboard') {
            return await command.showBossLeaderboard(interaction);
        } else if (customId.startsWith('fight_boss_')) {
            const bossId = customId.replace('fight_boss_', '');
            await interaction.reply({ content: `‚öîÔ∏è ƒêang chu·∫©n b·ªã chi·∫øn ƒë·∫•u v·ªõi boss ${bossId}...`, ephemeral: true });
        } else {
            await interaction.reply({ content: 'üîÑ Ch·ª©c nƒÉng boss ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω...', ephemeral: true });
        }
    },

    async handleAdminButtons(interaction, command) {
        const customId = interaction.customId;
        
        // Check admin permissions
        if (!interaction.member.permissions.has('Administrator')) {
            return await interaction.reply({ content: '‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng ch·ª©c nƒÉng n√†y!', ephemeral: true });
        }
        
        if (customId === 'admin_stats') {
            return await command.showBotStats(interaction);
        } else if (customId === 'admin_maintenance') {
            return await command.performMaintenance(interaction);
        } else if (customId === 'admin_backup') {
            return await command.createBackup(interaction);
        } else {
            await interaction.reply({ content: 'üîÑ Ch·ª©c nƒÉng admin ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω...', ephemeral: true });
        }
    },

    async handleSelectMenuInteraction(interaction) {
        const selected = interaction.values[0];
        
        if (interaction.customId === 'select_ranking_category') {
            const bxhCommand = require('../commands/bxh');
            const player = playerManager.getPlayer(interaction.user.id);
            
            switch (selected) {
                case 'realm':
                    return await bxhCommand.showRealmRanking(interaction, player);
                case 'power':
                    return await bxhCommand.showPowerRanking(interaction, player);
                case 'pvp':
                    return await bxhCommand.showPvPRanking(interaction, player);
                case 'boss':
                    return await bxhCommand.showBossRanking(interaction, player);
                case 'coins':
                    return await bxhCommand.showCoinsRanking(interaction, player);
                default:
                    await interaction.reply({ content: '‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!', ephemeral: true });
            }
        } else if (interaction.customId === 'help_category_select') {
            const hotroCommand = require('../commands/hotro');
            
            switch (selected) {
                case 'beginner':
                    return await hotroCommand.showBeginnerGuide(interaction);
                case 'commands':
                    return await hotroCommand.showCommandsHelp(interaction);
                case 'cultivation':
                    return await hotroCommand.showCultivationHelp(interaction);
                case 'combat':
                    return await hotroCommand.showCombatHelp(interaction);
                case 'shop':
                    return await hotroCommand.showShopHelp(interaction);
                case 'faq':
                    return await hotroCommand.showFAQ(interaction);
                default:
                    await interaction.reply({ content: '‚ùå Danh m·ª•c kh√¥ng h·ª£p l·ªá!', ephemeral: true });
            }
        } else {
            await interaction.reply({ content: '‚ùå Menu kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán!', ephemeral: true });
        }
    },

    // Keep existing cultivation handlers
    async handleStartCultivation(interaction) {
        const userId = interaction.user.id;
        const player = playerManager.getPlayer(userId);
        
        if (player.banned) {
            return interaction.reply({ 
                content: 'üö´ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m!', 
                ephemeral: true 
            });
        }

        if (player.isCultivating) {
            return interaction.reply({ 
                content: '‚ùå B·∫°n ƒëang trong qu√° tr√¨nh tu luy·ªán!', 
                ephemeral: true 
            });
        }

        // Check daily limit
        const today = new Date().toDateString();
        const lastDate = player.lastCultivationDate ? 
            new Date(player.lastCultivationDate).toDateString() : null;
        
        if (lastDate !== today) {
            player.cultivationCount = 0;
        }

        if (player.cultivationCount >= 5) {
            return interaction.reply({ 
                content: '‚è∞ B·∫°n ƒë√£ tu luy·ªán ƒë·ªß 5 l·∫ßn h√¥m nay!', 
                ephemeral: true 
            });
        }

        // Start cultivation
        player.isCultivating = true;
        player.cultivationStartTime = Date.now();
        player.cultivationCount++;
        player.lastCultivationDate = new Date().toISOString();
        
        // Auto-complete after 30 minutes
        setTimeout(() => {
            if (player.isCultivating) {
                const expGained = 1800;
                player.exp += expGained;
                player.isCultivating = false;
                delete player.cultivationStartTime;
            }
        }, 30 * 60 * 1000);
        
        const embed = new EmbedBuilder()
            .setColor('#00FF00')
            .setTitle('üßò‚Äç‚ôÇÔ∏è B·∫ÆT ƒê·∫¶U TU LUY·ªÜN')
            .setDescription('B·∫°n ƒë√£ b·∫Øt ƒë·∫ßu tu luy·ªán! S·∫Ω t·ª± ƒë·ªông k·∫øt th√∫c sau 30 ph√∫t.')
            .addFields(
                {
                    name: '‚è∞ Th·ªùi gian',
                    value: '30 ph√∫t',
                    inline: true
                },
                {
                    name: '‚ö° EXP/gi√¢y',
                    value: '1 EXP',
                    inline: true
                },
                {
                    name: 'üéØ T·ªïng EXP',
                    value: '1,800 EXP',
                    inline: true
                }
            )
            .setTimestamp();

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('stop_cultivation')
                    .setLabel('‚èπÔ∏è D·ª´ng tu luy·ªán')
                    .setStyle(ButtonStyle.Danger)
            );

        await interaction.reply({ embeds: [embed], components: [actionRow] });
    },

    async handleStopCultivation(interaction) {
        const userId = interaction.user.id;
        const player = playerManager.getPlayer(userId);
        
        if (!player.isCultivating) {
            return interaction.reply({ 
                content: '‚ùå B·∫°n kh√¥ng ƒëang tu luy·ªán!', 
                ephemeral: true 
            });
        }
        
        const timeSpent = Date.now() - player.cultivationStartTime;
        const minutesSpent = Math.floor(timeSpent / (1000 * 60));
        const expGained = Math.floor(timeSpent / 1000);
        
        player.exp += expGained;
        player.isCultivating = false;
        delete player.cultivationStartTime;
        
        const embed = new EmbedBuilder()
            .setColor('#FFA500')
            .setTitle('‚èπÔ∏è D·ª™NG TU LUY·ªÜN')
            .setDescription('B·∫°n ƒë√£ d·ª´ng tu luy·ªán!')
            .addFields(
                {
                    name: '‚ö° EXP nh·∫≠n ƒë∆∞·ª£c',
                    value: `${expGained.toLocaleString()} EXP`,
                    inline: true
                },
                {
                    name: '‚è∞ Th·ªùi gian tu luy·ªán',
                    value: `${minutesSpent} ph√∫t`,
                    inline: true
                }
            )
            .setTimestamp();

        await interaction.update({ embeds: [embed], components: [] });
    },

    async handleRegistrationConfirm(interaction) {
        const userId = interaction.user.id;
        const username = interaction.user.username;
        
        try {
            // Check if player already has a real account
            const existingPlayer = await playerManager.getPlayer(userId, username);
            if (existingPlayer.createdAt) {
                return interaction.reply({ 
                    content: '‚ö†Ô∏è B·∫°n ƒë√£ c√≥ t√†i kho·∫£n r·ªìi!', 
                    ephemeral: true 
                });
            }

            // Create new player account
            const player = await playerManager.createPlayerAccount(userId, username);
            
            logger.info(`New player account created: ${username} (${userId})`);
            
            const embed = new EmbedBuilder()
                .setColor('#00FF00')
                .setTitle('üéâ ƒêƒÇNG K√ù TH√ÄNH C√îNG!')
                .setDescription(`Ch√†o m·ª´ng **${username}** ƒë·∫øn v·ªõi th·∫ø gi·ªõi tu ti√™n!`)
                .addFields(
                    {
                        name: 'üèîÔ∏è C·∫£nh gi·ªõi',
                        value: 'Ph√†m Nh√¢n - Level 1',
                        inline: true
                    },
                    {
                        name: 'üí∞ T√†i s·∫£n',
                        value: '1,000 Coins',
                        inline: true
                    },
                    {
                        name: 'üéÅ Qu√† t√¢n th·ªß',
                        value: 'ƒê√£ ƒë∆∞·ª£c th√™m v√†o kho!',
                        inline: true
                    }
                )
                .setTimestamp();

            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('start_first_cultivation')
                        .setLabel('üßò‚Äç‚ôÇÔ∏è Tu luy·ªán l·∫ßn ƒë·∫ßu')
                        .setStyle(ButtonStyle.Success)
                );

            await interaction.update({ embeds: [embed], components: [actionRow] });
        } catch (error) {
            logger.error('Error in handleRegistrationConfirm:', error);
            
            if (error.message === 'Player account already exists') {
                await interaction.reply({
                    content: '‚ö†Ô∏è B·∫°n ƒë√£ c√≥ t√†i kho·∫£n r·ªìi!',
                    ephemeral: true
                });
            } else {
                await interaction.reply({
                    content: '‚ùå C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω!',
                    ephemeral: true
                });
            }
        }
    },

    async handleLearnMore(interaction) {
        const learnEmbed = new EmbedBuilder()
            .setColor('#3498DB')
            .setTitle('üìö H∆Ø·ªöNG D·∫™N CHO NG∆Ø·ªúI M·ªöI')
            .setDescription('T·∫•t c·∫£ nh·ªØng g√¨ b·∫°n c·∫ßn bi·∫øt v·ªÅ tu ti√™n!')
            .addFields(
                {
                    name: 'üßò‚Äç‚ôÇÔ∏è Tu Luy·ªán',
                    value: '‚Ä¢ S·ª≠ d·ª•ng `!tuluyen` ƒë·ªÉ b·∫Øt ƒë·∫ßu\n‚Ä¢ 5 l·∫ßn tu luy·ªán m·ªói ng√†y\n‚Ä¢ Nh·∫≠n EXP ƒë·ªÉ tƒÉng level',
                    inline: true
                },
                {
                    name: '‚ö° ƒê·ªôt Ph√°',
                    value: '‚Ä¢ S·ª≠ d·ª•ng `!dotpha` khi ƒë·ªß EXP\n‚Ä¢ TƒÉng c·∫£nh gi·ªõi v√† s·ª©c m·∫°nh\n‚Ä¢ M·ªü kh√≥a t√≠nh nƒÉng m·ªõi',
                    inline: true
                },
                {
                    name: '‚öîÔ∏è Chi·∫øn ƒê·∫•u',
                    value: '‚Ä¢ PvP v·ªõi `!pvp @user`\n‚Ä¢ ƒê√°nh boss v·ªõi `!boss`\n‚Ä¢ Nh·∫≠n rewards v√† EXP',
                    inline: true
                }
            )
            .setFooter({ text: 'S·∫µn s√†ng b·∫Øt ƒë·∫ßu ch∆∞a?' });
        
        await interaction.update({ embeds: [learnEmbed] });
    },

    async handleCancelRegistration(interaction) {
        const cancelEmbed = new EmbedBuilder()
            .setColor('#95A5A6')
            .setTitle('üëã H·∫∏N G·∫∂P L·∫†I')
            .setDescription('B·∫°n ƒë√£ h·ªßy ƒëƒÉng k√Ω. S·ª≠ d·ª•ng `!dk` khi s·∫µn s√†ng!')
            .setFooter({ text: 'Tu ti√™n lu√¥n ch·ªù ƒë√≥n b·∫°n!' });
        
        await interaction.update({ embeds: [cancelEmbed], components: [] });
    }
};
